#!/bin/python
import telegram
from telegram.ext import Updater
from telegram.ext import CommandHandler
from telegram.ext import MessageHandler, Filters
import logging
import configparser
import os
import time
from PIL import Image
import numpy as np

configfile = "/home/ostheer/.suremark_tg_bot.ini"
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
chat_state = 'normal'
config = configparser.ConfigParser()
config.read(configfile)

updater = Updater(token=config["CONFIG"]["key"], use_context=True)
dispatcher = updater.dispatcher

def print_text_raw(text, fullname):
    with open(fullname, "w") as file:
        file.write(text)

def print_imag_raw(image, fullname):
    image.download(fullname)
    
    img = Image.open(fullname)
    ary = np.array(img)
    
    # Split the three channels
    r,g,b = np.split(ary,3,axis=2)
    r=r.reshape(-1)
    g=r.reshape(-1)
    b=r.reshape(-1)
    
    # Standard RGB to grayscale 
    bitmap = list(map(lambda x: 0.299*x[0]+0.587*x[1]+0.114*x[2], 
    zip(r,g,b)))
    bitmap = np.array(bitmap).reshape([ary.shape[0], ary.shape[1]])
    bitmap = np.dot((bitmap > 128).astype(float),255)
    im = Image.fromarray(bitmap.astype(np.uint8))

    im.save(fullname.replace('jpg','bmp'))
    os.remove(fullname)

def Nsuffix(path, prefix, extension):
    N = 0
    files = os.listdir(path)
    for f in files:
        if extension in f and prefix in f:
            N = max(N, int(f.split('.'+extension)[0].split(prefix)[-1]))
    return N+1

def ibm_print(thing, caption=False):
    if type(thing) == str and caption == False:
        N = Nsuffix(config["CONFIG"]["SHARED_DIR"], 'to_print', 'txt')
        print_text_raw(thing, config["CONFIG"]["SHARED_DIR"] + "to_print" + str(N) + ".txt")
    elif caption == True:
        N = Nsuffix(config["CONFIG"]["SHARED_DIR"], 'to_print', 'caption')
        if type(thing) == str:
            print_text_raw(thing, config["CONFIG"]["SHARED_DIR"] + "to_print" + str(N) + ".caption")
        elif thing == None:
            print_text_raw("", config["CONFIG"]["SHARED_DIR"] + "to_print" + str(N) + ".caption")
    elif type(thing) == telegram.files.file.File:
        N = Nsuffix(config["CONFIG"]["SHARED_DIR"], 'to_print', 'jpg')
        print_imag_raw(thing, config["CONFIG"]["SHARED_DIR"] + "to_print" + str(N) + ".jpg")

def start(update, context):
    context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["start_reply"])
    context.bot.send_message(chat_id=config["USERS"]["admin"], text=str(update.effective_chat.first_name)+" (ID "+str(update.effective_chat.id)+") " + config["LANG"]["start_request"])

def photo_handler(update, context):
    #TODO: Figure out if I can make the dispatcher filter for text AND photos
    echo(update, context)

def register_cancel(update, context):
    global chat_state
    if str(update.effective_chat.id) == config["USERS"]["admin"]:
        chat_state = 'normal'
        reply_markup = telegram.ReplyKeyboardRemove()
        context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["cancelled"], reply_markup=reply_markup)
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["unauthorized"])

def register_user(update, context):
    global chat_state
    if str(update.effective_chat.id) == config["USERS"]["admin"]:
        chat_state = 'register'
        custom_keyboard = [[config["LANG"]["register_allow"]], [config["LANG"]["register_block"]], [config["LANG"]["register_remove"]]]
        reply_markup = telegram.ReplyKeyboardMarkup(custom_keyboard)
        context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["register_how"], reply_markup=reply_markup)
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["unauthorized"])

def echo(update, context):
    global chat_state
    config.read(configfile)
   
    #Admin user
    if str(update.effective_chat.id) == config["USERS"]["admin"]:
        if chat_state == 'normal':
            try:
                newFile = context.bot.get_file(update.message.photo[0].file_id)
                ibm_print(update.message.caption, caption=True)
                ibm_print(newFile)
            except IndexError:
                pass
            ibm_print(update.message.text)
            context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["print_started"])
    
        elif chat_state == 'register':
            reply_markup = telegram.ReplyKeyboardRemove()
            if update.message.text == config["LANG"]["register_allow"]:
                context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["register_allow_who"], reply_markup=reply_markup)
                chat_state = 'register_allow'
            elif update.message.text == config["LANG"]["register_block"]:
                context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["register_block_who"], reply_markup=reply_markup)
                chat_state = 'register_block'
            elif update.message.text == config["LANG"]["register_remove"]:
                context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["register_remove_who"], reply_markup=reply_markup)
                chat_state = 'register_remove'

        elif chat_state == 'register_allow':
            try:
                context.bot.send_message(chat_id=update.message.text, text=config["LANG"]["register_granted"])
                config["USERS"]["allowed"] += "," + update.message.text
                with open(configfile, 'w') as f:
                    config.write(f)
                context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["register_allow_success"])
            except telegram.error.BadRequest:
                context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["register_allow_invalid_id"])
            except:
                context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["register_allow_failed"])
            finally:
                chat_state = 'normal'

        elif chat_state == 'register_block':
            try:
                context.bot.send_message(chat_id=update.message.text, text=config["LANG"]["register_denied"])
                config["USERS"]["blocked"] += "," + update.message.text
                with open(configfile, 'w') as f:
                    config.write(f)
                context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["register_block_success"])
            except telegram.error.BadRequest:
                context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["register_block_invalid_id"])
            except:
                context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["register_block_failed"])
            finally:
                chat_state = 'normal'

        elif chat_state == 'register_remove':
            try:
                config["USERS"]["blocked"] = config["USERS"]["blocked"].replace(update.message.text, "")
                config["USERS"]["allowed"] = config["USERS"]["allowed"].replace(update.message.text, "")

                while ",," in config["USERS"]["allowed"]:
                    config["USERS"]["allowed"] = config["USERS"]["allowed"].replace(",,",",")
                while ",," in config["USERS"]["blocked"]:
                    config["USERS"]["blocked"] = config["USERS"]["blocked"].replace(",,",",")

                with open(configfile, 'w') as f:
                    config.write(f)
                context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["register_remove_success"])
            except:
                context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["register_remove_failed"])
            finally:
                chat_state = 'normal'

    #Whitelisted user
    elif str(update.effective_chat.id) in config["USERS"]["allowed"].split(','):
        try:
            newFile = context.bot.get_file(update.message.photo[0].file_id)
            ibm_print(update.message.caption, caption=True)
            ibm_print(newFile)
        except IndexError:
            pass
        ibm_print(update.message.text)
        context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["print_started"])
        context.bot.send_message(chat_id=config["USERS"]["admin"], text=str(update.effective_chat.first_name) + " " + config["LANG"]["print_received"])
    
    #Blocked user
    elif  str(update.effective_chat.id) in config["USERS"]["blocked"].split(','):
        context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["request_reply_blocked_user"])
 
    #Unknown user.
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["request_reply_unknown_user"])
        context.bot.send_message(chat_id=config["USERS"]["admin"], text=str(update.effective_chat.first_name)+" (ID "+str(update.effective_chat.id)+") " + config["LANG"]["print_attempt"])
        context.bot.send_message(chat_id=config["USERS"]["admin"], text=update.message.text)

start_handler = CommandHandler('start', start)
dispatcher.add_handler(start_handler)

register_cancel_handler = CommandHandler('cancel', register_cancel)
dispatcher.add_handler(register_cancel_handler)

register_handler = CommandHandler('register', register_user)
dispatcher.add_handler(register_handler)

echo_handler = MessageHandler(Filters.text, echo)
dispatcher.add_handler(echo_handler)

dispatcher.add_handler(MessageHandler(Filters.photo, photo_handler))

attempts = 0
try:
    updater.start_polling()
except telegram.error.NetworkError:
    if attempts == 5:
        os._exit(1)
    time.sleep(10)
    attempts = attempts + 1
    pass
