#!/bin/python
import telegram
from telegram.ext import Updater
from telegram.ext import CommandHandler
from telegram.ext import MessageHandler, Filters
import logging
import configparser
import os
import time

configfile = "/home/ostheer/.suremark_tg_bot.ini"
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
chat_state = 'normal'
config = configparser.ConfigParser()
config.read(configfile)

updater = Updater(token=config["CONFIG"]["key"], use_context=True)
dispatcher = updater.dispatcher


def ibm_print(thing):
    with open(config["CONFIG"]["SHARED_DIR"] + "to_print.txt", "w") as file:
        file.write(thing)

def register_cancel(update, context):
    global chat_state
    if str(update.effective_chat.id) == config["USERS"]["admin"]:
        chat_state = 'normal'
        reply_markup = telegram.ReplyKeyboardRemove()
        context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["cancelled"], reply_markup=reply_markup)
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["unauthorized"])

def register_user(update, context):
    global chat_state
    if str(update.effective_chat.id) == config["USERS"]["admin"]:
        chat_state = 'register'
        custom_keyboard = [[config["LANG"]["register_allow"]], [config["LANG"]["register_block"]]]
        reply_markup = telegram.ReplyKeyboardMarkup(custom_keyboard)
        context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["register_how"], reply_markup=reply_markup)
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["unauthorized"])

def echo(update, context):
    global chat_state
    config.read(configfile)
   
    #Admin user
    if str(update.effective_chat.id) == config["USERS"]["admin"]:
        if chat_state == 'normal':
            context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["print_started"])
            ibm_print(update.message.text)
    
        elif chat_state == 'register':
            if update.message.text == config["LANG"]["register_allow"]:
                chat_state = 'register_allow'
            elif update.message.text == config["LANG"]["register_block"]:
                chat_state = 'register_block'

            reply_markup = telegram.ReplyKeyboardRemove()
            context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["register_who"], reply_markup=reply_markup)
    
        elif chat_state == 'register_allow':
            config["USERS"]["allowed"] += "," + update.message.text
            with open(configfile, 'w') as f:
                config.write(f)
            context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["register_allow_success"])
            chat_state = 'normal'

        elif chat_state == 'register_block':
            config["USERS"]["blocked"] += "," + update.message.text
            with open(configfile, 'w') as f:
                config.write(f)
            context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["register_block_success"])
            chat_state = 'normal'

    #Whitelisted user
    elif str(update.effective_chat.id) in config["USERS"]["allowed"].split(','):
        context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["print_started"])
        ibm_print(update.message.text)
        context.bot.send_message(chat_id=config["USERS"]["admin"], text=str(update.effective_chat.first_name) + config["LANG"]["print_received"])
    
    #Blocked user
    elif  str(update.effective_chat.id) in config["USERS"]["blocked"].split(','):
        context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["request_reply_blocked_user"])
 
    #Unknown user.
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text=config["LANG"]["request_reply_unknown_user"])
        context.bot.send_message(chat_id=config["USERS"]["admin"], text=str(update.effective_chat.first_name)+" (ID "+str(update.effective_chat.id)+") " + config["LANG"]["print_attempt"])
        context.bot.send_message(chat_id=config["USERS"]["admin"], text=update.message.text)

register_cancel_handler = CommandHandler('cancel', register_cancel)
dispatcher.add_handler(register_cancel_handler)

register_handler = CommandHandler('register', register_user)
dispatcher.add_handler(register_handler)

echo_handler = MessageHandler(Filters.text, echo)
dispatcher.add_handler(echo_handler)

config.read(configfile)
attempts = 0
try:
    updater.start_polling()
except telegram.error.NetworkError:
    if attempts == 5:
        os._exit(1)
    time.sleep(10)
    attempts = attempts + 1
    pass
